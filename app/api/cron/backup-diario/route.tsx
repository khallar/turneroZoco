import { type NextRequest, NextResponse } from "next/server"
import { leerEstadoSistema, crearBackupDiario } from "@/lib/database"

export const dynamic = "force-dynamic"
export const runtime = "nodejs"
export const maxDuration = 60 // 60 segundos m√°ximo

export async function GET(request: NextRequest) {
  try {
    console.log("ü§ñü§ñü§ñ CRON JOB EJECUT√ÅNDOSE ü§ñü§ñü§ñ")
    console.log("‚è∞ Hora de ejecuci√≥n (UTC):", new Date().toUTCString())
    console.log(
      "‚è∞ Hora de ejecuci√≥n (Argentina):",
      new Date().toLocaleString("es-AR", { timeZone: "America/Argentina/Buenos_Aires" }),
    )

    const authHeader = request.headers.get("authorization")
    const cronSecret = process.env.CRON_SECRET
    const vercelCronHeader = request.headers.get("x-vercel-cron")
    const adminTestHeader = request.headers.get("x-admin-test")

    console.log("üîê Verificando autenticaci√≥n...")
    console.log("   - CRON_SECRET configurado:", cronSecret ? "‚úÖ S√ç" : "‚ùå NO")
    console.log("   - Authorization header:", authHeader ? "‚úÖ Presente" : "‚ùå Ausente")
    console.log("   - Vercel Cron header:", vercelCronHeader ? "‚úÖ Presente" : "‚ùå Ausente")
    console.log("   - Admin Test header:", adminTestHeader ? "‚úÖ Presente" : "‚ùå Ausente")

    // Verificar si es una llamada leg√≠tima
    const isVercelCron = vercelCronHeader !== null
    const isAdminTest = adminTestHeader === "true"

    if (isVercelCron) {
      console.log("‚úÖ Llamada de Vercel Cron detectada - autenticaci√≥n autom√°tica")
    } else if (isAdminTest) {
      console.log("üß™ Prueba manual desde admin detectada - permitiendo acceso")
    } else if (cronSecret) {
      // Solo para llamadas externas, verificar el token
      const expectedAuth = `Bearer ${cronSecret}`
      if (authHeader !== expectedAuth) {
        console.log("‚ùå Unauthorized: Token inv√°lido o ausente")
        console.log("   - Esperado:", `Bearer ${cronSecret.substring(0, 10)}...`)
        console.log("   - Recibido:", authHeader || "ninguno")
        return NextResponse.json(
          {
            error: "Unauthorized",
            hint: "Este endpoint requiere autenticaci√≥n. Usa el header: Authorization: Bearer CRON_SECRET",
          },
          { status: 401 },
        )
      }
      console.log("‚úÖ Autenticaci√≥n con token exitosa")
    } else {
      console.log("‚ö†Ô∏è CRON_SECRET no configurado - endpoint p√∫blico")
      console.log("üí° Recomendaci√≥n: Configura CRON_SECRET en Vercel para mayor seguridad")
    }

    // Obtener el estado completo del sistema
    console.log("üìñ Leyendo estado del sistema...")
    const estadoCompleto = await leerEstadoSistema()

    console.log("üìä Estado le√≠do:")
    console.log(`   - Total Tickets: ${estadoCompleto.totalAtendidos}`)
    console.log(`   - Fecha Inicio: ${estadoCompleto.fechaInicio}`)
    console.log(`   - Tickets Atendidos: ${estadoCompleto.numerosLlamados}`)

    // Solo crear backup si hay datos
    if (estadoCompleto.totalAtendidos > 0) {
      console.log("üíæ Creando backup autom√°tico...")
      await crearBackupDiario(estadoCompleto)

      console.log("‚úÖ‚úÖ‚úÖ BACKUP AUTOM√ÅTICO CREADO EXITOSAMENTE ‚úÖ‚úÖ‚úÖ")
      console.log(`üìä Tickets respaldados: ${estadoCompleto.totalAtendidos}`)
      console.log(`üìÖ Fecha del backup: ${estadoCompleto.fechaInicio}`)

      return NextResponse.json({
        success: true,
        message: "Backup diario creado exitosamente por CRON",
        fecha: estadoCompleto.fechaInicio,
        ticketsRespaldados: estadoCompleto.totalAtendidos,
        horaEjecucion: new Date().toISOString(),
        horaEjecucionArgentina: new Date().toLocaleString("es-AR", {
          timeZone: "America/Argentina/Buenos_Aires",
        }),
      })
    } else {
      console.log("‚ÑπÔ∏è No hay datos para respaldar (0 tickets)")

      return NextResponse.json({
        success: true,
        message: "No hay datos para respaldar",
        fecha: estadoCompleto.fechaInicio,
        ticketsRespaldados: 0,
        horaEjecucion: new Date().toISOString(),
        horaEjecucionArgentina: new Date().toLocaleString("es-AR", {
          timeZone: "America/Argentina/Buenos_Aires",
        }),
      })
    }
  } catch (error) {
    console.error("‚ùå‚ùå‚ùå ERROR EN BACKUP AUTOM√ÅTICO ‚ùå‚ùå‚ùå")
    console.error("Error details:", error)
    console.error("Error stack:", error instanceof Error ? error.stack : "No stack")

    return NextResponse.json(
      {
        success: false,
        error: "Error al crear backup autom√°tico",
        details: error instanceof Error ? error.message : "Error desconocido",
        horaEjecucion: new Date().toISOString(),
      },
      { status: 500 },
    )
  }
}

// Permitir POST tambi√©n para pruebas manuales
export async function POST(request: NextRequest) {
  console.log("üì® POST recibido - redirigiendo a GET")
  return GET(request)
}
